[[validator-annotation-processor]]
== 注解处理器

你有没有无意中做过一些事情，比如

* 在不支持的数据类型上指定约束注解(例如用 `@Past` 注解一个 String 类型变量 ) 
* 注解 JavaBeans 属性的 setter 方法(而不是 getter 方法)
* 使用约束注解静态字段/方法(这是不支持的)？

那么 Hibernate Validator 注解处理器就是适合您的工具。通过插入构建过程并在约束注解使用不正确时引发编译错误，它有助于防止此类错误。

[TIP]
====
您可以在 http://sourceforge.net/projects/hibernate/files/hibernate-validator[Sourceforge] 或者 Maven Central 等常见的存储库 GAV `org.hibernate.validator:hibernate-validator-annotation-processor:{hvVersion}` 中找到 Hibernate Validator Annotation Processor 作为发行包的一部分。
====

[[validator-annotationprocessor-prerequisites]]
=== 先决条件

Hibernate Validator 注解处理器基于 http://jcp.org/en/jsr/detail?id=269[JSR 269] 定义的"Pluggable Annotation Processing API"， http://jcp.org/en/jsr/detail?id=269[JSR 269] 是 Java 平台的一部分。

[[validator-annotationprocessor-features]]
=== 功能

从 Hibernate Validator {hvVersion} 开始，Hibernate Validator 注解处理器检查如下:

* 在允许注解元素的类型上使用约束注解
* 只在非静态字段或方法用约束注解
* 只在非原始字段或方法用 `@Valid` 注解
* 只有在 JavaBeans 的 getter 方法上用约束注解，这些约束注解是有效的(可选地，参见下面)
* 只有这样的注解类型用约束注解，这些约束注解本身就是约束注解
* 使用 `@GroupSequenceProvider` 定义动态默认组序列是有效的
* 注解参数值是有意义和有效的
* 继承层次结构中的方法参数约束尊重继承规则
* 方法在继承层次结构中返回值约束遵循继承规则

[[validator-annotationprocessor-options]]
=== 选项

Hibernate Validator Annotation Processor 的行为可以通过以下 {javaTechnotesBaseUrl}/tools/windows/javac.html#BHCHACIB[processor options] 来控制:

`diagnosticKind`:: 控制如何报告约束问题。必须是 enum `javax.tools.Diagnostic.Kind` 中某个值的字符串表示形式。例如 `WARNING` 。每当 AP 检测到约束问题时，`ERROR` 值将导致编译停止。默认为 `ERROR` 。

`methodConstraintsSupported`:: 控制在任何类型的方法中是否允许约束。使用 Hibernate Validator 支持的方法级别约束时，必须将其设置为 `true` 。可以将其设置为 `false` ，以便只允许在由 Jakarta Bean Validation API 定义的 javabean getter 方法中存在约束。默认为 `true` 。

`verbose`:: 控制是否显示详细的处理信息，这对调试有用。一定是 `true` 的
或 `false` 。默认为 `false`。

[[validator-annotationprocessor-usage]]
=== 使用注解处理器

本节详细说明如何将 Hibernate Validator 注解处理器集成到命令行构建(Maven、 Ant、 javac)以及基于 IDE 的构建(Eclipse、 IntelliJ IDEA、 NetBeans)中。

[[validator-annotationprocessor-commandline]]
==== 命令行构建

[[validator-annotationprocessor-maven]]
===== Maven

对于 Maven 使用 Hibernate Validator 注解处理器，可以通过 `annotationProcessorPaths` 选项设置如下:

.在 Maven 中使用 Hibernate Validator 注解处理器
====
[source, XML]
[subs="verbatim,attributes"]
----
<project>
    [...]
    <build>
        [...]
        <plugins>
            [...]
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.hibernate.validator</groupId>
                            <artifactId>hibernate-validator-annotation-processor</artifactId>
                            <version>{hvVersion}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            [...]
        </plugins>
        [...]
    </build>
    [...]
</project>
----
====

[[validator-annotationprocessor-gradle]]
===== Gradle

当使用 https://gradle.org[Gradle] 时，将注解处理器作为一个 `annotationProcessor` 依赖项引用就足够了。

.使用 Gradle 的注解处理器
====
[source, groovy]
[subs="verbatim,attributes"]
----
dependencies {
	annotationProcessor group: 'org.hibernate.validator', name: 'hibernate-validator-annotation-processor', version: '{hvVersion}'

	// any other dependencies ...
}
----
====

[[validator-annotationprocessor-ant]]
===== Apache Ant

与直接使用 javac 类似，在调用 http://ant.apache.org/[Apache Ant] 的  http://ant.apache.org/manual/CoreTasks/javac.html[javac task] ，可以将注解处理器作为编译器参数添加:

.使用 Ant 的注解处理器
====
[source, XML]
[subs="verbatim,attributes"]
----
<javac srcdir="src/main"
       destdir="build/classes"
       classpath="/path/to/validation-api-{bvVersion}.jar">
       <compilerarg value="-processorpath" />
       <compilerarg value="/path/to/hibernate-validator-annotation-processor-{hvVersion}.jar"/>
</javac>
----
====

[[validator-annotationprocessor-javac]]
===== javac

在命令行上使用 {javaTechnotesBaseUrl}/guides/javac/index.html[javac] 进行编译时，使用“ processorpath”选项指定 JAR _hibernate-validator-annotation-processor-{hvVersion}.jar_ ，如下面的清单所示。编译器将自动检测处理器并在编译期间调用它。

.使用带 javac 的注解处理器
====
[subs="verbatim,attributes"]
----
javac src/main/java/org/hibernate/validator/ap/demo/Car.java \
   -cp /path/to/validation-api-{bvVersion}.jar \
   -processorpath /path/to/hibernate-validator-annotation-processor-{hvVersion}.jar
----
====

[[validator-annotationprocessor-ide]]
==== IDE builds

===== Eclipse

如果您已经安装了 https://www.eclipse.org/m2e/[M2E Eclipse plug-in] 插件，那么将为上述配置的 Maven 项目自动设置注解处理器。

对于普通的 Eclipse 项目，按照以下步骤设置注解处理器:

* 右键单击项目，选择 "Properties"
* 进入 "Java Compiler"  ，确保 "Compiler compliance level" 设定为  "1.8" 。否则处理器将不会被激活
* 进入 "Java Compiler - Annotation Processing" 并选择 "Enable annotation processing" 
* 转到 "Java Compiler - Annotation Processing - Factory Path" ，添加 JAR
hibernate-validator-annotation-processor-{hvVersion}.jar
* 确认并重新构建

现在，您应该可以在编辑器和 "Problem" 视图中看到任何注解问题，它们都是常规的错误标记:

image::annotation_processor_eclipse.png[]

[[validator-annotationprocessor-idea]]
===== IntelliJ IDEA

使用 http://www.jetbrains.com/idea/[IntelliJ IDEA] (9及以上版本)中的注解处理器必须遵循以下步骤:

* 点击 "File", 然后是 "Settings",
* 展开 "Compiler", 选择 "Annotation Processors"
* 选择 "Enable annotation processing" 然后在 "Processor path" 输入:
/path/to/hibernate-validator-annotation-processor-{hvVersion}.jar
* 添加处理器的标准名称 org.hibernate.validator.ap.ConstraintValidationProcessor
到“Annotation Processors”列表
* 如果适用，将模块添加到"Processed Modules"列表中

然后，重建项目应显示任何错误的约束注释：

image::annotation_processor_intellij.png[]

[[validator-annotationprocessor-netbeans]]
===== NetBeans

http://www.netbeans.org/[NetBeans] 支持在IDE内部使用注解处理器，为此，请执行以下操作：

* 右键单击您的项目，选择 "Properties"
* 转到 "Libraries", 选项卡 "Processor", 然后添加 JAR 包hibernate-validator-annotation-processor-{hvVersion}.jar
* 转到 "Build - Compiling", 选择 "Enable Annotation Processing" 和 "Enable Annotation Processing
in Editor"。 通过指定其标准名称 org.hibernate.validator.ap.ConstraintValidationProcessor 添加注释处理器 

任何约束注释问题将直接在编辑器中标记：

image::annotation_processor_netbeans.png[]

[[validator-annotationprocessor-known-issues]]
=== 已知的问题

截至2017年7月，存在以下已知问题：

* 暂时不支持容器元素约束。

* 不正确地支持应用于容器但实际上应用于容器元素的约束（通过 `Unwrapping.Unwrap` 有效负载或通过标有 `@UnwrapByDefault` 标记的值提取器）。

* https://hibernate.atlassian.net/browse/HV-308[HV-308]: 注解处理器不会评估 http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#chapter-xml-configuration[使用 XML] 为约束注册的其他验证器。

* 在Eclipse中使用处理器时，有时无法 https://hibernate.atlassian.net/browse/HV-293[正确评估] 自定义约束。 在这些情况下，清理项目可能会有所帮助。 Eclipse JSR 269 API的实现似乎是一个问题，但是这里需要进一步的研究。

* 在Eclipse中使用处理器时，无法检查动态默认组序列定义。 经过进一步研究，Eclipse JSR 269 API实现似乎是一个问题。
