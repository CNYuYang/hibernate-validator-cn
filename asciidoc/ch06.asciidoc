[[validator-customconstraints]]
== 自定义约束

Jakarta Bean Validation API 定义了一整套标准约束注解，如 `@NotNull`,
`@Size` 等。在这些内置约束不够充分的情况下，可以轻松地创建根据特定校验需求定制的自定义约束。

[[validator-customconstraints-simple]]
=== 创建一个简单的约束

要创建自定义约束，需要以下三个步骤:

* 创建一个约束注解
* 实现一个校验器
* 定义默认错误消息

[[validator-customconstraints-constraintannotation]]
==== 约束注解

本节展示如何编写一个约束注解，该注解可用于校验给定的字符串完全大写或小写。稍后，这个约束将应用于 <<validator-gettingstarted>> 中的 `Car` 类 `licensePlate` 字段。确保该字段始终是大写字母字符串。

首先需要的是一种表达这两种情况模式(大写或小写)的方法。虽然可以使用 `String` 常量，但更好的方法是为此使用枚举:

.枚举 `CaseMode` 表示大小写两种状态
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/CaseMode.java[]
----
====

下一步是定义约束注解。如果你以前从未设计过注解，这看起来可能有点吓人，但实际上并不难:

[[example-defining-custom-constraint]]
.定义 `@CheckCase` 约束注解
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/CheckCase.java[tags=include]
----
====

使用 `@interface` 关键字定义注解类型。注解类型的所有属性都以类似于方法的方式声明。Jakarta Bean Validation API 规范要求任何约束注解定义:

* `message` 属性返回校验失败的默认错误信息。

* `groups` 属性允许对分组(see <<chapter-groups>>)约束进行校验。这必须默认为 Class < ? > 类型的空数组.

* `payload` 属性可以被Jakarta Bean Validation API的客户端用于将自定义有效负载对象分配给约束。API 本身不使用此属性。自定义有效负载的一个例子是严重性的定义:
+
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/payload/Severity.java[tags=include]
----

[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/payload/ContactDetails.java[tags=include]
----
====
+
现在，客户端可以在校验 `ContactDetails` 实例后，使用 `ConstraintViolation.getConstraintDescriptor().getPayload()` 访问约束的严重性。并其根据严重性调整其行为。

除了这三个强制属性外，还有另一个属性 `value`，它允许指定所需的 case 模式。`value` 值是一个特殊的值，如果它是唯一指定的属性，在使用注解时可以省略，例如 `@CheckCase(CaseMode.UPPER)` 。

此外，约束注解还使用了一些元注解:

* `@Target({ FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE_USE})`: 定义约束支持的目标元素类型。 `@CheckCase` 可用于字段 ( `FIELD`), JavaBeans properties
和返回值 (`METHOD`), 方法/构造函数参数 (`PARAMETER`) 和参数化类型的类型参数 (`TYPE_USE`)。元素类型 `ANNOTATION_TYPE` 允许 `@CheckCase` 创建组合约束。
+
在创建类级别约束 (see <<validator-usingvalidator-classlevel>>),  `TYPE` 类型必须被支持。针对构造函数返回值的约束需要支持 `CONSTRUCTOR` 类型。 交叉参数的校验必须支持 `METHOD` 和 `CONSTRUCTOR` 。

* `@Retention(RUNTIME)`: 指定此类型的注解将在运行时通过反射的方式可用

* `@Constraint(validatedBy = CheckCaseValidator.class)`: 标记在使用 `@CheckCase` 时指定一个指定的validator(校验器)。 如果某个约束可用于多个数据类型，则可以指定多个校验器，每个校验器对应一个数据类型。

* `@Documented`: 表示 `@CheckCase` 的使用将包含在用它注解的元素的 JavaDoc 中。

* `@Repeatable(List.class)`:  表示注解可以在同一个地方重复多次，通常使用不同的配置。 `List` 是包含的注解类型。

示例中还显示了这个包含注解类型名为 `List` 。它允许在同一个元素上指定多个 `@CheckCase` ，例如使用不同的校验组和消息。虽然可以使用另一个名称，但 Jakarta Bean Validation 范建议使用名称 `List` 并使注解成为相应约束类型的内部注解。

[[section-constraint-validator]]
==== 约束校验器

在定义了注解之后，您需要创建一个约束校验器，它能够校验使用 `@CheckCase` 的元素。 为此，实现
`ConstraintValidator`，如下所示:

[[example-constraint-validator]]
.实现 `@CheckCase` 约束的约束校验器 
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/CheckCaseValidator.java[tags=include]
----
====

`ConstraintValidator` 接口定义了需要在实现中设置的两个类型参数(范型)。第一个指定要校验的注释(`CheckCase`)。第二个指定校验器可以处理的元素类型( `String` )。如果一个约束支持多个数据类型，那么每个允许的类型都必须实现一个 `ConstraintValidator` ，并在约束注解中注册，如上所示。

校验器的实现非常简单。`initialize()` 方法使您能够访问已校验约束的属性值，并允许您将它们存储在校验器的字段中，如示例所示。

`isValid()` 方法包含实际的校验逻辑。对于 `@CheckCase` ，这是检查给定的字符串是完全小写还是大写，这取决于 `initialize()` 中检索的大小写模式。注意，Jakarta Bean Validation 校验规范建议将空值视为有效值。如果 `null` 不是元素的有效值，则应该显式地用 `@NotNull` 对其进行注释。

===== The `ConstraintValidatorContext`

<<example-constraint-validator>> 依赖于从 `isValid()` 方法返回 `true` 或 `false` 来判断是否生成默认错误消息。 使用作为参数传递的 `ConstraintValidatorContext` 对象，可以添加额外的错误消息，也可以完全禁用默认错误消息生成，并只定义自定义错误消息。 `ConstraintValidatorContext` API 被建模为 fluent 接口，最好用一个例子来演示:

[[example-constraint-validator-context]]
.使用 `ConstraintValidatorContext` 定义自定义错误消息
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/constraintvalidatorcontext/CheckCaseValidator.java[tags=include]
----
====

<<example-constraint-validator-context>> 展示了如何禁用默认错误消息生成并使用指定的消息模板添加自定义错误消息。在这个示例中，使用 `ConstraintValidatorContext` 会生成与默认错误消息生成相同的错误消息。

[TIP]
====
通过调用 `addConstraintViolation()` 添加每个已配置的约束冲突非常重要。只有在此之后才会创建新的约束冲突。
====

默认情况下，在自定义约束中，`ConstraintValidatorContext` 不允许使用EL表达式。

但是，对于某些高级需求，可能需要使用 Expression Language。

在这种情况下，您需要打开 `HibernateConstraintValidatorContext` 并显式启用 Expression Language。有关更多信息，请参见 <<section-hibernateconstraintvalidatorcontext>> 。

请参阅 <<section-custom-property-paths>>  ，以了解如何使用 `ConstraintValidatorContext` API 控制类级约束违反约束的属性路径。

[[constraint-validator-hibernateconstraintvalidator]]
===== The `HibernateConstraintValidator`  扩展

Hibernate Validator 提供了 `ConstraintValidator` 的拓展：`HibernateConstraintValidator`。

这个扩展的目的是为 `initialize()` 方法提供更多的上下文信息，因为在当前 `ConstraintValidator` 契约中，只有注释作为参数传递。

`HibernateConstraintValidator` 的 `initialize()` 方法有两个参数：

 * `ConstraintDescriptor` 代表当前的约束。你可以使用 `ConstraintDescriptor#getAnnotation()` 获取相关注解。
 * `HibernateConstraintValidatorInitializationContext` 它提供有用的帮助和上下文信息，如时钟提供者或时间校验容忍度。

这个扩展被标记为正在孵化，因此它可能会受到更改。该计划是将其标准化，并在未来将其纳入 Jakarta Bean Validation 标准。

下面的例子展示了如何将校验器基于 `HibernateConstraintValidator`:

[[example-constraint-validator-hibernateconstraintvalidator]]
.使用 `HibernateConstraintValidator`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/MyFutureValidator.java[tags=include]
----
====

[WARNING]
====
您应该只实现 `initialize()` 方法中的一个。请注意，在初始化校验器时都会调用这两个方法。
====

[[constraint-validator-payload]]
===== 将有效负载传递给约束校验器

有时，您可能希望在某些外部参数上设定约束验证器行为的条件。

例如，如果每个国家有一个实例，那么邮政编码验证器可能会根据应用程序实例的区域设置而有所不同。另一个需求可能是在特定环境中具有不同的行为: 分段环境可能无法访问验证程序正确运行所必需的一些外部生产资源。

为所有这些用例引入了约束验证器有效负载的概念。它是一个通过 `HibernateConstraintValidatorContext` 从 `Validator` 实例传递到每个约束验证器的对象。

下面的示例演示如何在 `ValidatorFactory` 初始化期间设置约束验证器有效负载。除非您覆盖这个默认值，否则这个 `ValidatorFactory` 创建的所有 ``Validator``s 都将设置这个约束验证器有效负载值。

[[example-constraint-validator-payload-definition-validatorfactory]]
.在 `ValidatorFactory` 初始化时定义有效负载
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/constraintvalidatorpayload/ConstraintValidatorPayloadTest.java[tags=setConstraintValidatorPayloadDuringValidatorFactoryInitialization]
----
====

另一个选项是使用上下文设置每个 `Validator`  的约束验证器有效负载:

[[example-constraint-validator-payload-definition-validatorcontext]]
.获取不同有效负载的 `Validator` 
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/constraintvalidatorpayload/ConstraintValidatorPayloadTest.java[tags=setConstraintValidatorPayloadInValidatorContext]
----
====

一旦你设置了约束验证器有效负载，它就可以在你的约束验证器中使用，如下面的例子所示:

[[example-constraint-validator-payload-usage]]
.在约束验证器中使用约束验证器有效负载
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/constraintvalidatorpayload/ZipCodeValidator.java[tags=include]
----
====

`HibernateConstraintValidatorContext#getConstraintValidatorPayload()` )有一个类型参数，只有当有效负载是给定类型时才返回有效负载。

[NOTE]
====
需要注意的是，约束验证器有效负载不同于您可以在引发的约束冲突中包含的动态有效负载。

这个约束验证器有效负载的全部目的是用来约束验证器的行为。它不包含在违反约束中，除非特定的
`ConstraintValidator` 实现通过使用 <<section-dynamic-payload,constraint violation dynamic payload mechanism>> 有效负载机制将有效负载传递给发出的违反约束的情况。

====

[[validator-customconstraints-errormessage]]
==== 错误信息

最后一个缺少的构建块是一个错误消息，应该在违反 `@CheckCase` 约束时使用。要定义这个属性，请创建一个带有以下内容的 _ValidationMessages.properties_ 文件 (see also <<section-message-interpolation>>)

.定义 `CheckCase` 约束的错误信息
====
----
org.hibernate.validator.referenceguide.chapter06.CheckCase.message=Case mode must be {value}.
----
====

如果发生验证错误，验证运行时将使用您为 `@CheckCase` 注释的消息属性指定的默认值，以便在此资源包中查找错误消息。

[[validator-customconstraints-using]]
==== 使用约束

现在你可以使用 <<validator-gettingstarted>> 章节中的 `Car` 类中的用该约束来指定 `licensePlate` 字段应该只包含大写字符串:

[[example-car-with-checkcase]]
.使用 `@CheckCase` 约束
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/Car.java[tags=include]
----
====

最后， <<example-using-checkcase>> 演示了如何通过校验将使用无效车牌的 `Car` 实例来违反 `@CheckCase` 约束。

[[example-using-checkcase]]
.校验 `@CheckCase` 约束
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/CarTest.java[tags=testCheckCaseConstraint]
----
====

[[section-class-level-constraints]]
=== 类级别的约束

如前所述，还可以在类级别应用约束来验证整个对象的状态。定义类级别约束的方式与定义属性约束的方式相同。<<example-implementing-classlevel-constraint>> 展示了 `@ValidPassengerCount` 注解的定义。 它的使用可以查看 <<example-class-level>>。

[[example-implementing-classlevel-constraint]]
.实现一个类级别的约束注解
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/classlevel/ValidPassengerCount.java[tags=include]
----

[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/classlevel/ValidPassengerCountValidator.java[tags=include]
----
====

如示例所示，您需要在 `@Target` 愿注解中添加 `TYPE` 类型。这允许将该约束放在类上使用。示例中的约束校验器的 `isValid()` 方法接收 `Car` 类型，并且可以访问完整的对象状态以确定给定实例是否有效。

[[section-custom-property-paths]]
==== 自定义属性路径

默认情况下，类级别约束的约束冲突是在注释类型的级别上报告的，例如 `Car` 。

在某些情况下，违规的属性路径最好是指涉及的属性之一。例如，您可能希望针对 `Car` 具体不满足校验的属性，而不是 `@ValidPassengerCount` 约束。

<<example-custom-error>> 展示了如何通过使用传递给 `isValid()` 的约束验证器上下文来为属性 passengers 构建一个带有属性节点的自定义约束违反。注意，您还可以添加几个属性节点，指向验证 bean 的子实体。

[[example-custom-error]]
.添加关于字段信息的 `ConstraintViolation` 
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/custompath/ValidPassengerCountValidator.java[tags=include]
----
====

[[section-cross-parameter-constraints]]
=== 交叉参数约束

Jakarta Bean Validation 区分两种不同类型的约束。

一般的约束(到目前为止已经讨论过)适用于带注解的元素，例如类型、字段、容器元素、方法参数或返回值等。相反，交叉参数约束适用于方法或构造函数的参数数组，可用于表示依赖于多个参数值的验证逻辑。

为了定义交叉参数约束，其校验器类必须用 `@SupportedValidationTarget(ValidationTarget.PARAMETERS)` 标记。 `ConstraintValidator` 接口的范型参数( `T` )必须必须设置为 `Object` 或者 `Object[]` ，以便在 `isValid()` 方法中接收方法/构造函数参数数组。

下面的示例显示了交叉参数约束的定义，该约束可用于检查方法的两个 `Date` 参数的顺序是否正确:

.交叉参数约束
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/crossparameter/ConsistentDateParameters.java[tags=include]
----
====

交叉参数约束的定义与定义一般约束没有任何不同，即它必须指定成员 `message()`, `groups()` 和 `payload()` ，并注释 `@Constraint` 。这个元注释还指定了相应的验证器，如 <<example-cross-parameter-validator>> 所示。除了元素类型 `METHOD` 和 `CONSTRUCTOR` 之外，还指定了 `ANNOTATION_TYPE` 作为注释的目标，以便能够基于 `@ConsistentDateParameters` 创建组合约束(参见：<<section-constraint-composition>>)。

[NOTE]
====
跨参数约束是在方法或构造函数的声明上直接指定的，返回值约束也是这种情况。因此，为了提高代码的可读性，建议选择使约束目标明显的约束名称，例如：`@ConsistentDateParameters`。
====

[[example-cross-parameter-validator]]
.泛型和交叉参数约束
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/crossparameter/ConsistentDateParametersValidator.java[tags=include]
----
====

如上所述，必须使用在 `@SupportedValidationTarget` 中设置目标为 `PARAMETERS` 来表示这是一个交叉参数约束。由于交叉参数约束可以应用于任何方法或构造函数，因此在验证器实现中检查预期的参数数量和类型被认为是一种最佳实践。

与通用约束一样，应该将 `null` 参数视为有效参数，并且应该对单个参数使用 `@NotNull` 来确保参数不为 `null` 。

[TIP]
====
与类级别约束类似，在验证交叉参数约束时，可以对单个参数而不是所有参数创建自定义约束违反。只需从传递给 `isValid()` 的 `ConstraintValidatorContext` 通过调用 `addParameterNode()` 添加一个参数节点。在这个示例中，您可以使用它对验证过的方法的结束日期参数创建约束冲突。
====

在极少数情况下，约束既是泛型约束又是交叉参数约束。如果一个约束具有一个带有 `@SupportedValidationTarget({ValidationTarget.PARAMETERS, ValidationTarget.ANNOTATED_ELEMENT})` 注释的验证器类，或者它具有一个通用的和跨参数的验证器类，那么就会出现这种情况。

当在具有参数和返回值的方法上声明这样的约束时，无法确定预期的约束目标。因此，同时具有通用性和交叉参数的约束必须定义一个成员 `validationAppliesTo()` ，它允许约束用户指定约束的目标，如示例 <<example-dual-cross-parameter-constraint>> 。

[[example-dual-cross-parameter-constraint]]
.泛型和交叉参数约束
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/crossparameter/ScriptAssert.java[tags=include]
----
====

`@ScriptAssert` 约束有两个验证器(未显示) ，一个泛型验证器和一个交叉参数验证器，因此定义了成员 `validationAppliesTo()` 。默认值 `IMPLICIT` 允许在可能的情况下自动派生目标(例如，如果约束在字段上声明，或者在具有参数但没有返回值的方法上声明)。

如果不能隐式确定目标，则用户必须将其设置为 `PARAMETERS` 或 `RETURN_VALUE`，如 <<example-dual-cross-parameter-constraint-usage>> 。

[[example-dual-cross-parameter-constraint-usage]]
.为一般的和交叉参数约束指定目标
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/crossparameter/ScriptAssertTest.java[tags=buildCar]
----
====

[[section-constraint-composition]]
=== 约束组合

查看示例 <<example-car-with-checkcase>> 中的 `Car` 类的 `licensePlate` 字段，您已经看到了三个约束注释。在更复杂的场景中，甚至可以对一个元素应用更多的约束，这可能很容易变得有点令人困惑。此外，如果在另一个类中有一个 `licensePlate` ，那么您也必须将所有约束声明复制到另一个类中，这违反了 DRY 原则。

您可以通过创建由几个基本约束组成的更高级别约束来解决此类问题。例子 <<example-composed-constraint>> 展示了一个合成的约束注释，其中包括 `@NotNull` 、`@Size` 和 `@CheckCase` :

[[example-composed-constraint]]
.创建一个 `@ValidLicensePlate` 约束
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/constraintcomposition/ValidLicensePlate.java[tags=include]
----
====

要创建组合约束，只需使用其组合约束对约束声明进行注释。如果组合约束本身需要一个验证器，则在 `@Constraint` 注释中指定该验证器。对于不需要额外验证器(如 `@ValidLicensePlate` )的组合约束，只需将 `validatedBy()`  设置为一个空数组。

在 `licensePlate` 字段中使用新的组合约束完全等价于前一个版本，其中三个约束直接在字段本身中声明:

.使用组合约束 `ValidLicensePlate`
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/constraintcomposition/Car.java[]
----
====

这个在校验 `Car` 实例中构建 ``ConstraintViolation``s 合集，是 `@ValidLicensePlate` 每个组成的约束，如果您更喜欢在任何构成约束被违反的情况下使用单个约束违反，可以使用 `@ReportAsSingleViolation` 。

.使用 @ReportAsSingleViolation
====
[source, JAVA, indent=0]
----
include::{sourcedir}/org/hibernate/validator/referenceguide/chapter06/constraintcomposition/reportassingle/ValidLicensePlate.java[tags=include]
----
====
